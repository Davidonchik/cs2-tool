#!/usr/bin/env python3
"""
CS2 Server Scanner - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç requests –≤–º–µ—Å—Ç–æ aiohttp –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import json
import logging
import os
import threading
import time
from datetime import datetime
from urllib.parse import urlencode
import argparse
from concurrent.futures import ThreadPoolExecutor

try:
    import requests
    import websocket
    from websocket import create_connection
    import websockets
except ImportError:
    print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("pip install requests websocket-client websockets")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class CS2ScannerSimple:
    def __init__(self, max_workers=10):
        self.api_key = None
        self.max_workers = max_workers
        self.server_history = {}
        self.disappeared_servers = {}
        self.game_servers = {}
        self.empty_servers = {}
        self.saved_servers = {}
        self.is_scanning = False
        self.websocket_clients = set()
        self.lock = threading.Lock()
        
        self.admin_password = "admin123"
        self.admin_authenticated = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è API –∫–ª—é—á–∞
        self.api_key_set_flag = threading.Event()
        
        # –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã –∫–∞—Ä—Ç
        self.server_map_changes = {}  # –°—á–µ—Ç—á–∏–∫ —Å–º–µ–Ω –∫–∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_map_history = {}  # –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.auto_save_threshold = 3  # –ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–º–µ–Ω –∫–∞—Ä—Ç)
        self.auto_save_cooldown = {}  # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        
        self.load_saved_servers()
        self.load_map_changes_data()
        
        self.maps = [
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2 (Premier/Competitive)
            'de_ancient', 'de_dust2', 'de_inferno', 'de_mirage', 'de_nuke', 
            'de_overpass', 'de_train', 'de_vertigo', 'de_anubis', 'de_grail', 'de_jura',
            
            # –ö–∞—Ä—Ç—ã –¥–ª—è Wingman
            'de_brewery', 'de_dogtown',
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞—Ä—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            'de_cache', 'de_dust', 'de_aztec', 'de_italy', 'de_cobblestone', 'de_office'
        ]
        self.selected_maps = set(self.maps)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∫–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
        self.scan_interval = 2  # seconds

    def fetch_servers(self, map_name, offset=0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        if not self.api_key:
            logger.warning(f"‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç—ã {map_name}")
            return []
        
        # –î–ª—è –¥–µ–º–æ-–∫–ª—é—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.api_key == "DEMO_KEY_FOR_TESTING_ONLY":
            logger.info(f"üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã {map_name}")
            if map_name == "de_dust2":
                return [
                    {
                        'steamid': 'test_server_1',
                        'name': 'Test Server 1',
                        'addr': '192.168.1.100:27015',
                        'map': 'de_dust2',
                        'players': 10,
                        'max_players': 32,
                        'bots': 2,
                        'version': '1.0.0'
                    }
                ]
            return []
            
        try:
            url = "https://api.steampowered.com/IGameServersService/GetServerList/v1/"
            params = {
                'key': self.api_key,
                'filter': f'appid\\730\\region\\44\\map\\{map_name}',
                'limit': 100,
                'offset': offset
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            return data.get('response', {}).get('servers', [])
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã {map_name}: {e}")
            return []
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –¥–ª—è –∫–∞—Ä—Ç—ã {map_name}: {e}")
            return []

    def scan_map_with_offsets(self, map_name, max_offset=0):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ—Ñ—Ñ—Å–µ—Ç–∞–º–∏"""
        all_servers = []
        
        for offset in range(0, max_offset + 1, 100):
            servers = self.fetch_servers(map_name, offset)
            if not servers:
                break
            all_servers.extend(servers)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        logger.info(f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ {map_name}: –Ω–∞–π–¥–µ–Ω–æ {len(all_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return all_servers

    def scan_all_maps(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç"""
        all_servers = []
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            future_to_map = {
                executor.submit(self.scan_map_with_offsets, map_name, 0): map_name 
                for map_name in self.selected_maps
            }
            
            for future in future_to_map:
                try:
                    servers = future.result()
                    all_servers.extend(servers)
                except Exception as e:
                    map_name = future_to_map[future]
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã {map_name}: {e}")
        
        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_servers)}")
        return all_servers

    def scan_graphics_settings(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ graphics_settings"""
        servers = self.scan_map_with_offsets('graphics_settings', 1000)
        return servers

    def process_servers(self, current_servers):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        current_ids = {server['steamid'] for server in current_servers if server.get('steamid')}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ
        for server in current_servers:
            steam_id = server.get('steamid')
            if steam_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞
                addr = server.get('addr', '')
                if addr:
                    ip_port = addr.split(':')
                    if len(ip_port) == 2:
                        ip, port = ip_port[0], ip_port[1]
                        server['mode'] = self.get_server_mode(ip, port)
                    else:
                        server['mode'] = 'unknown'
                else:
                    server['mode'] = 'unknown'
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É –∫–∞—Ä—Ç
                if steam_id in self.server_history:
                    old_map = self.server_history[steam_id].get('map', 'unknown')
                    new_map = server.get('map', 'unknown')
                    server_name = server.get('name', steam_id)
                    
                    if old_map != new_map:
                        self.track_map_change(steam_id, server_name, old_map, new_map)
                
                self.server_history[steam_id] = server
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ–∑–Ω—É–≤—à–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
        disappeared_count = 0
        for steam_id, old_server in self.server_history.items():
            if steam_id not in current_ids and steam_id not in self.disappeared_servers:
                # –°–µ—Ä–≤–µ—Ä –∏—Å—á–µ–∑ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö
                disappeared_server = {
                    **old_server,
                    'map': 'graphics_settings',
                    'players': 0,
                    'max_players': 0,
                    'bots': 0,
                    'version': 'Unknown',
                    'disappeared_at': datetime.now().isoformat()
                }
                
                with self.lock:
                    self.disappeared_servers[steam_id] = disappeared_server
                
                disappeared_count += 1
                logger.info(f"üî¥ –°–µ—Ä–≤–µ—Ä {old_server.get('name', steam_id)} –∏—Å—á–µ–∑ —Å –∫–∞—Ä—Ç—ã {old_server.get('map')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:")
        logger.info(f"   - –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.server_history)}")
        logger.info(f"   - –¢–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(current_ids)}")
        logger.info(f"   - –£–∂–µ –≤ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö: {len(self.disappeared_servers)}")
        logger.info(f"   - –ù–æ–≤—ã—Ö –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö: {disappeared_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–Ω—É–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–µ—Ä—ã
        returned_count = 0
        disappeared_to_remove = []
        for steam_id in list(self.disappeared_servers.keys()):
            if steam_id in current_ids:
                # –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª—Å—è - —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö
                disappeared_to_remove.append(steam_id)
                returned_count += 1
                server_name = self.disappeared_servers[steam_id].get('name', steam_id)
                logger.info(f"üü¢ –°–µ—Ä–≤–µ—Ä {server_name} –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –∫–∞—Ä—Ç—É {self.server_history[steam_id].get('map', 'Unknown')}")
        
        # –£–¥–∞–ª—è–µ–º –≤–µ—Ä–Ω—É–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–µ—Ä—ã
        with self.lock:
            for steam_id in disappeared_to_remove:
                server_name = self.disappeared_servers[steam_id].get('name', steam_id)
                del self.disappeared_servers[steam_id]
                logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        with self.lock:
            self.game_servers.clear()
            for server in current_servers:
                steam_id = server.get('steamid')
                if steam_id and server.get('map') != 'graphics_settings':
                    self.game_servers[steam_id] = server
        
        if disappeared_count > 0:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {disappeared_count} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        if returned_count > 0:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {returned_count} –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(self.server_history)}, –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö {len(self.disappeared_servers)}, —Ç–µ–∫—É—â–∏—Ö {len(current_servers)}")
        
        return {
            'disappeared_count': disappeared_count,
            'returned_count': returned_count,
            'total_current': len(current_servers),
            'total_tracked': len(self.server_history)
        }

    async def handle_websocket(self, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            self.websocket_clients.add(websocket)
            logger.info("üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            async for message in websocket:
                try:
                    data = json.loads(message)
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {data.get('type')}")
                    logger.info(f"üì® –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
                    
                    if data.get('type') == 'set_api_key':
                        api_key = data.get('api_key')
                        logger.info(f"üîë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É API –∫–ª—é—á–∞: {api_key[:10] if api_key else 'None'}...")
                        if api_key:
                            self.api_key = api_key
                            logger.info("üîë API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω
                            self.api_key_set_flag.set()
                            response = {
                                'type': 'api_key_set',
                                'status': 'success'
                            }
                            await websocket.send(json.dumps(response))
                            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ API –∫–ª—é—á–∞")
                        else:
                            response = {
                                'type': 'api_key_set',
                                'status': 'error',
                                'message': 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                            }
                            await websocket.send(json.dumps(response))
                            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞")
                    
                    elif data.get('type') == 'get_initial_state':
                        with self.lock:
                            await websocket.send(json.dumps({
                                'type': 'initial_state',
                                'disappeared_servers': list(self.disappeared_servers.values()),
                                'game_servers': list(self.game_servers.values()),
                                'stats': {
                                    'total_tracked': len(self.server_history),
                                    'total_disappeared': len(self.disappeared_servers),
                                    'total_game': len(self.game_servers)
                                }
                            }))
                    
                    elif data.get('type') == 'scan_graphics_settings':
                        servers = self.scan_graphics_settings()
                        with self.lock:
                            self.empty_servers = {server['steamid']: server for server in servers}
                        await websocket.send(json.dumps({
                            'type': 'empty_servers_update',
                            'empty_servers': list(self.empty_servers.values())
                        }))
                    
                    elif data.get('type') == 'get_game_servers':
                        with self.lock:
                            await websocket.send(json.dumps({
                                'type': 'game_servers_update',
                                'game_servers': list(self.game_servers.values())
                            }))
                    
                    elif data.get('type') == 'start_scan':
                        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        import threading
                        scan_thread = threading.Thread(target=self.run_single_scan)
                        scan_thread.daemon = True
                        scan_thread.start()
                        
                        await websocket.send(json.dumps({
                            'type': 'scan_started',
                            'status': 'success'
                        }))
                    
                    elif data.get('type') == 'force_update':
                        logger.info("üì§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                        with self.lock:
                            await websocket.send(json.dumps({
                                'type': 'scan_complete',
                                'stats': {
                                    'disappeared_count': len(self.disappeared_servers),
                                    'returned_count': 0,
                                    'total_current': len(self.game_servers),
                                    'total_tracked': len(self.server_history)
                                },
                                'disappeared_servers': list(self.disappeared_servers.values()),
                                'game_servers': list(self.game_servers.values())
                            }))
                        logger.info(f"üì§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(self.disappeared_servers)} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                    
                    elif data.get('type') == 'update_maps':
                        maps = data.get('maps', [])
                        logger.info(f"üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {maps}")
                        self.selected_maps = set(maps)
                        response = {
                            'type': 'maps_updated',
                            'status': 'success',
                            'maps': list(self.selected_maps)
                        }
                        await websocket.send(json.dumps(response))
                        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.selected_maps)} –∫–∞—Ä—Ç")
                    
                    elif data.get('type') == 'authenticate_admin':
                        password = data.get('password')
                        if self.authenticate_admin(password):
                            await websocket.send(json.dumps({
                                'type': 'admin_authenticated',
                                'status': 'success'
                            }))
                        else:
                            await websocket.send(json.dumps({
                                'type': 'admin_authenticated',
                                'status': 'error',
                                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
                            }))
                    
                    elif data.get('type') == 'get_saved_servers':
                        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö –∫–∞—Ä—Ç –∏ —Ä–µ–∂–∏–º–µ
                        enriched_servers = []
                        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(self.saved_servers)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ {len(self.server_map_changes)} –∑–∞–ø–∏—Å–µ–π –æ —Å–º–µ–Ω–∞—Ö –∫–∞—Ä—Ç")
                        
                        for server in self.saved_servers.values():
                            # –ò—â–µ–º steam_id –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                            steam_id = None
                            server_addr = f"{server['ip']}:{server['port']}"
                            server_name = server['name']
                            
                            # –ò—â–µ–º –ø–æ –∞–¥—Ä–µ—Å—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
                            for sid, srv in self.server_history.items():
                                if srv.get('addr') == server_addr:
                                    steam_id = sid
                                    break
                            
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ map_changes
                            if not steam_id:
                                for sid, map_data in self.server_map_changes.items():
                                    map_server_name = map_data.get('server_name', '')
                                    if map_server_name and server_name in map_server_name:
                                        steam_id = sid
                                        break
                            
                            enriched_server = server.copy()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö –∫–∞—Ä—Ç
                            if steam_id and steam_id in self.server_map_changes:
                                map_stats = self.server_map_changes[steam_id]
                                enriched_server['map_changes_count'] = map_stats['changes_count']
                                enriched_server['last_map_change'] = map_stats.get('last_change', 'unknown')
                            else:
                                enriched_server['map_changes_count'] = 0
                                enriched_server['last_map_change'] = 'unknown'
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
                            if steam_id:
                                determined_mode = self.determine_server_mode_from_maps(steam_id)
                                if determined_mode != 'unknown':
                                    enriched_server['mode'] = determined_mode
                                logger.info(f"üîç –°–µ—Ä–≤–µ—Ä {server['name']} ({server_addr}): steam_id={steam_id}, —Ä–µ–∂–∏–º={determined_mode}, —Å–º–µ–Ω –∫–∞—Ä—Ç={enriched_server.get('map_changes_count', 0)}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω steam_id –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server['name']} ({server_addr})")
                            
                            enriched_servers.append(enriched_server)
                        
                        await websocket.send(json.dumps({
                            'type': 'saved_servers_update',
                            'saved_servers': enriched_servers
                        }))
                    
                    elif data.get('type') == 'add_saved_server':
                        ip = data.get('ip')
                        port = data.get('port')
                        name = data.get('name')
                        mode = data.get('mode')
                        description = data.get('description', '')
                        if ip and port and name and mode:
                            self.add_saved_server(ip, port, name, mode, description)
                            await websocket.send(json.dumps({
                                'type': 'add_saved_server',
                                'status': 'success',
                                'message': f'–°–µ—Ä–≤–µ—Ä {name} ({ip}:{port}) –¥–æ–±–∞–≤–ª–µ–Ω'
                            }))
                        else:
                            await websocket.send(json.dumps({
                                'type': 'add_saved_server',
                                'status': 'error',
                                'message': '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
                            }))
                    
                    elif data.get('type') == 'update_saved_server':
                        ip = data.get('ip')
                        port = data.get('port')
                        name = data.get('name')
                        mode = data.get('mode')
                        description = data.get('description', '')
                        if ip and port and name and mode:
                            if self.update_saved_server(ip, port, name, mode, description):
                                await websocket.send(json.dumps({
                                    'type': 'update_saved_server',
                                    'status': 'success',
                                    'message': f'–°–µ—Ä–≤–µ—Ä {name} ({ip}:{port}) –æ–±–Ω–æ–≤–ª–µ–Ω'
                                }))
                            else:
                                await websocket.send(json.dumps({
                                    'type': 'update_saved_server',
                                    'status': 'error',
                                    'message': f'–°–µ—Ä–≤–µ—Ä ({ip}:{port}) –Ω–µ –Ω–∞–π–¥–µ–Ω'
                                }))
                        else:
                            await websocket.send(json.dumps({
                                'type': 'update_saved_server',
                                'status': 'error',
                                'message': '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
                            }))
                    
                    elif data.get('type') == 'delete_saved_server':
                        ip = data.get('ip')
                        port = data.get('port')
                        if ip and port:
                            if self.delete_saved_server(ip, port):
                                await websocket.send(json.dumps({
                                    'type': 'delete_saved_server',
                                    'status': 'success',
                                    'message': f'–°–µ—Ä–≤–µ—Ä ({ip}:{port}) —É–¥–∞–ª–µ–Ω'
                                }))
                            else:
                                await websocket.send(json.dumps({
                                    'type': 'delete_saved_server',
                                    'status': 'error',
                                    'message': f'–°–µ—Ä–≤–µ—Ä ({ip}:{port}) –Ω–µ –Ω–∞–π–¥–µ–Ω'
                                }))
                        else:
                            await websocket.send(json.dumps({
                                'type': 'delete_saved_server',
                                'status': 'error',
                                'message': '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
                            }))
                    
                    elif data.get('type') == 'get_map_changes_stats':
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω –∫–∞—Ä—Ç
                        steam_id = data.get('steam_id')
                        if steam_id:
                            stats = self.get_server_map_stats(steam_id)
                            if stats:
                                await websocket.send(json.dumps({
                                    'type': 'map_changes_stats',
                                    'status': 'success',
                                    'stats': stats
                                }))
                            else:
                                await websocket.send(json.dumps({
                                    'type': 'map_changes_stats',
                                    'status': 'error',
                                    'message': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                                }))
                        else:
                            await websocket.send(json.dumps({
                                'type': 'map_changes_stats',
                                'status': 'error',
                                'message': 'steam_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                            }))
                    
                    elif data.get('type') == 'get_top_changing_servers':
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç
                        limit = data.get('limit', 10)
                        top_servers = self.get_top_changing_servers(limit)
                        await websocket.send(json.dumps({
                            'type': 'top_changing_servers',
                            'status': 'success',
                            'servers': top_servers
                        }))
                    
                    elif data.get('type') == 'set_auto_save_threshold':
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        threshold = data.get('threshold')
                        if threshold is not None and isinstance(threshold, int) and threshold > 0:
                            self.auto_save_threshold = threshold
                            await websocket.send(json.dumps({
                                'type': 'auto_save_threshold_updated',
                                'status': 'success',
                                'threshold': self.auto_save_threshold
                            }))
                            logger.info(f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold} —Å–º–µ–Ω –∫–∞—Ä—Ç")
                        else:
                            await websocket.send(json.dumps({
                                'type': 'auto_save_threshold_updated',
                                'status': 'error',
                                'message': '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞'
                            }))
                    
                    elif data.get('type') == 'get_auto_save_threshold':
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        await websocket.send(json.dumps({
                            'type': 'auto_save_threshold',
                            'status': 'success',
                            'threshold': self.auto_save_threshold
                        }))
                    
                    elif data.get('type') == 'force_cleanup':
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                        removed_count = self.force_cleanup_disappeared_servers()
                        await websocket.send(json.dumps({
                            'type': 'force_cleanup',
                            'status': 'success',
                            'message': f'–û—á–∏—â–µ–Ω–æ {removed_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö'
                        }))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        await websocket.send(json.dumps({
                            'type': 'scan_complete',
                            'stats': {
                                'disappeared_count': 0,
                                'returned_count': removed_count,
                                'total_current': len(self.game_servers),
                                'total_tracked': len(self.server_history)
                            },
                            'disappeared_servers': [],
                            'game_servers': list(self.game_servers.values())
                        }))
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        except websockets.exceptions.InvalidMessage as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –∫ WebSocket: {e}")
        except websockets.exceptions.ConnectionClosed as e:
            logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        finally:
            self.websocket_clients.discard(websocket)
            logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

    async def broadcast_update(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.websocket_clients:
            return
        
        message = json.dumps(data)
        disconnected = set()
        
        for websocket in self.websocket_clients:
            try:
                await websocket.send(message)
            except websockets.exceptions.ConnectionClosed:
                disconnected.add(websocket)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")
                disconnected.add(websocket)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.websocket_clients -= disconnected

    def broadcast_update_sync(self, data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.websocket_clients:
            return
        
        message = json.dumps(data)
        disconnected = set()
        
        for websocket in self.websocket_clients:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                asyncio.run(websocket.send(message))
            except websockets.exceptions.ConnectionClosed:
                disconnected.add(websocket)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")
                disconnected.add(websocket)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.websocket_clients -= disconnected

    def continuous_scan(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.is_scanning = True
        first_scan = True
        
        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞ –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        logger.info("üí° –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        
        # –ñ–¥–µ–º API –∫–ª—é—á –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        api_key_received = False
        for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥
            if self.api_key_set_flag.is_set():
                api_key_received = True
                break
            time.sleep(1)
        
        if api_key_received:
            logger.info("‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        else:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –Ω–µ–≥–æ")
        
        while self.is_scanning:
            try:
                if first_scan:
                    logger.info("üîç –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                    current_servers = self.scan_all_maps()
                    first_scan = False
                else:
                    current_servers = self.scan_all_maps()
                    stats = self.process_servers(current_servers)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
                    current_ids = {server['steamid'] for server in current_servers if server.get('steamid')}
                    still_disappeared = []
                    
                    for steam_id in list(self.disappeared_servers.keys()):
                        if steam_id not in current_ids:
                            still_disappeared.append(steam_id)
                        else:
                            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {self.disappeared_servers[steam_id].get('name', steam_id)} –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö, –Ω–æ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!")
                    
                    logger.info(f"üìä –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö {len(still_disappeared)} –∏–∑ {len(self.disappeared_servers)}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä
                    try:
                        self.broadcast_update_sync({
                            'type': 'scan_complete',
                            'stats': stats,
                            'disappeared_servers': list(self.disappeared_servers.values()),
                            'game_servers': list(self.game_servers.values())
                        })
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä: {len(self.disappeared_servers)} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä: {e}")
                
                time.sleep(self.scan_interval)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if hasattr(self, '_last_force_send'):
                    if time.time() - self._last_force_send > 10:
                        self._last_force_send = time.time()
                        try:
                            self.broadcast_update_sync({
                                'type': 'scan_complete',
                                'stats': {
                                    'disappeared_count': len(self.disappeared_servers),
                                    'returned_count': 0,
                                    'total_current': len(self.game_servers),
                                    'total_tracked': len(self.server_history)
                                },
                                'disappeared_servers': list(self.disappeared_servers.values()),
                                'game_servers': list(self.game_servers.values())
                            })
                            logger.info(f"üì§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {len(self.disappeared_servers)} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                else:
                    self._last_force_send = time.time()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def load_saved_servers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists('saved_servers.json'):
            try:
                with open('saved_servers.json', 'r') as f:
                    self.saved_servers = json.load(f)
                logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.saved_servers)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            except json.JSONDecodeError:
                logger.warning("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                self.saved_servers = {}
        else:
            logger.info("üì¶ –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª saved_servers.json, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ...")
            self.saved_servers = {}

    def save_servers(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('saved_servers.json', 'w') as f:
                json.dump(self.saved_servers, f, indent=4)
            logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.saved_servers)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

    def load_map_changes_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if os.path.exists('map_changes_data.json'):
            try:
                with open('map_changes_data.json', 'r') as f:
                    data = json.load(f)
                    self.server_map_changes = data.get('changes', {})
                    self.server_map_history = data.get('history', {})
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç –¥–ª—è {len(self.server_map_changes)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            except json.JSONDecodeError:
                logger.warning("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç")
                self.server_map_changes = {}
                self.server_map_history = {}
        else:
            logger.info("üìä –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª map_changes_data.json, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ...")
            self.server_map_changes = {}
            self.server_map_history = {}

    def save_map_changes_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            data = {
                'changes': self.server_map_changes,
                'history': self.server_map_history
            }
            with open('map_changes_data.json', 'w') as f:
                json.dump(data, f, indent=4)
            logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç –¥–ª—è {len(self.server_map_changes)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç: {e}")

    def track_map_change(self, steam_id, server_name, old_map, new_map):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –∫–∞—Ä—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
        if old_map == new_map:
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        if steam_id not in self.server_map_changes:
            self.server_map_changes[steam_id] = {
                'changes_count': 0,
                'last_change': None,
                'server_name': server_name,
                'changes_history': []
            }
        
        if steam_id not in self.server_map_history:
            self.server_map_history[steam_id] = []
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–º–µ–Ω
        self.server_map_changes[steam_id]['changes_count'] += 1
        self.server_map_changes[steam_id]['last_change'] = datetime.now().isoformat()
        self.server_map_changes[steam_id]['server_name'] = server_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        change_record = {
            'from': old_map,
            'to': new_map,
            'timestamp': datetime.now().isoformat()
        }
        self.server_map_changes[steam_id]['changes_history'].append(change_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        if len(self.server_map_changes[steam_id]['changes_history']) > 10:
            self.server_map_changes[steam_id]['changes_history'] = self.server_map_changes[steam_id]['changes_history'][-10:]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç
        self.server_map_history[steam_id].append(new_map)
        if len(self.server_map_history[steam_id]) > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.server_map_history[steam_id] = self.server_map_history[steam_id][-20:]
        
        logger.info(f"üîÑ –°–µ—Ä–≤–µ—Ä {server_name} —Å–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É: {old_map} ‚Üí {new_map} (–≤—Å–µ–≥–æ —Å–º–µ–Ω: {self.server_map_changes[steam_id]['changes_count']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        self.check_auto_save_server(steam_id, server_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_map_changes_data()

    def check_auto_save_server(self, steam_id, server_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if steam_id not in self.server_map_changes:
            return
        
        changes_count = self.server_map_changes[steam_id]['changes_count']
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (–Ω–µ —Å–ø–∞–º–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
        if steam_id in self.auto_save_cooldown:
            if current_time - self.auto_save_cooldown[steam_id] < 3600:  # 1 —á–∞—Å –∫—É–ª–¥–∞—É–Ω–∞
                return
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if changes_count >= self.auto_save_threshold:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            if steam_id in self.server_history:
                server_info = self.server_history[steam_id]
                addr = server_info.get('addr', '')
                
                if addr and ':' in addr:
                    ip, port = addr.split(':', 1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
                    server_key = f"{ip}:{port}"
                    if server_key not in self.saved_servers:
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä
                        mode = self.get_server_mode(ip, port)
                        description = f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ {changes_count} —Å–º–µ–Ω –∫–∞—Ä—Ç"
                        
                        self.add_saved_server(ip, port, server_name, mode, description)
                        logger.info(f"üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä {server_name} –ø–æ—Å–ª–µ {changes_count} —Å–º–µ–Ω –∫–∞—Ä—Ç")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
                        self.auto_save_cooldown[steam_id] = current_time
                    else:
                        logger.info(f"‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä {server_name} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")

    def get_server_map_stats(self, steam_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω –∫–∞—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if steam_id in self.server_map_changes:
            return self.server_map_changes[steam_id]
        return None

    def get_top_changing_servers(self, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ–Ω –∫–∞—Ä—Ç"""
        sorted_servers = sorted(
            self.server_map_changes.items(),
            key=lambda x: x[1]['changes_count'],
            reverse=True
        )
        return sorted_servers[:limit]

    def get_server_mode(self, ip, port):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ IP –∏ –ø–æ—Ä—Ç—É"""
        server_key = f"{ip}:{port}"
        if server_key in self.saved_servers:
            return self.saved_servers[server_key].get('mode', 'unknown')
        return 'unknown'
    
    def determine_server_mode_from_maps(self, steam_id):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ—Å–µ—â–∞–ª"""
        if steam_id not in self.server_map_history:
            return 'unknown'
        
        maps_visited = set(self.server_map_history[steam_id])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
        premier_maps = {'de_ancient', 'de_dust2', 'de_inferno', 'de_mirage', 'de_nuke', 
                       'de_overpass', 'de_train', 'de_vertigo', 'de_anubis', 'de_grail', 'de_jura'}
        wingman_maps = {'de_brewery', 'de_dogtown'}
        legacy_maps = {'de_cache', 'de_dust', 'de_aztec', 'de_italy', 'de_cobblestone', 'de_office'}
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–µ—â–∞–ª —Ç–æ–ª—å–∫–æ Wingman –∫–∞—Ä—Ç—ã
        if maps_visited.issubset(wingman_maps) and len(maps_visited) > 0:
            return 'Wingman'
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–µ—â–∞–ª Premier –∫–∞—Ä—Ç—ã
        if maps_visited.intersection(premier_maps):
            if maps_visited.intersection(wingman_maps):
                return 'Mixed (Premier + Wingman)'
            else:
                return 'Premier/Competitive'
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–µ—â–∞–ª —Ç–æ–ª—å–∫–æ Legacy –∫–∞—Ä—Ç—ã
        if maps_visited.issubset(legacy_maps) and len(maps_visited) > 0:
            return 'Legacy'
        
        # –ï—Å–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        if len(maps_visited) > 0:
            return 'Mixed'
        
        return 'unknown'

    def add_saved_server(self, ip, port, name, mode, description=""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        server_key = f"{ip}:{port}"
        self.saved_servers[server_key] = {
            'ip': ip,
            'port': port,
            'name': name,
            'mode': mode,
            'description': description,
            'added_at': datetime.now().isoformat()
        }
        self.save_servers()
        logger.info(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {name} ({ip}:{port})")

    def update_saved_server(self, ip, port, name, mode, description=""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        server_key = f"{ip}:{port}"
        if server_key in self.saved_servers:
            self.saved_servers[server_key].update({
                'name': name,
                'mode': mode,
                'description': description,
                'updated_at': datetime.now().isoformat()
            })
            self.save_servers()
            logger.info(f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {name} ({ip}:{port})")
            return True
        return False

    def delete_saved_server(self, ip, port):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        server_key = f"{ip}:{port}"
        if server_key in self.saved_servers:
            server_name = self.saved_servers[server_key]['name']
            del self.saved_servers[server_key]
            self.save_servers()
            logger.info(f"üì¶ –£–¥–∞–ª–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server_name} ({ip}:{port})")
            return True
        return False

    def authenticate_admin(self, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if password == self.admin_password:
            self.admin_authenticated = True
            logger.info("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return True
        else:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False

    def force_cleanup_disappeared_servers(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        with self.lock:
            old_count = len(self.disappeared_servers)
            self.disappeared_servers.clear()
            logger.info(f"üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {old_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö")
            return old_count

    def start_scanning(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        scan_thread = threading.Thread(target=self.continuous_scan, daemon=True)
        scan_thread.start()
        logger.info("üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def stop_scanning(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_scanning = False
        logger.info("üõë –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def run_single_scan(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            current_servers = self.scan_all_maps()
            stats = self.process_servers(current_servers)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket
            import asyncio
            try:
                loop = asyncio.get_event_loop()
                loop.create_task(self.broadcast_update({
                    'type': 'scan_complete',
                    'stats': stats,
                    'disappeared_servers': list(self.disappeared_servers.values()),
                    'game_servers': list(self.game_servers.values())
                }))
                logger.info("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            except (RuntimeError, Exception) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def main():
    parser = argparse.ArgumentParser(description='CS2 Server Scanner - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è')
    parser.add_argument('--port', type=int, default=8765, help='–ü–æ—Ä—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--workers', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤')
    args = parser.parse_args()

    print("=" * 50)
    print("   CS2 –ù–∞—Ç–∏–≤–Ω—ã–π –°–∫–∞–Ω–µ—Ä –°–µ—Ä–≤–µ—Ä–æ–≤ (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 50)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import requests
        import websocket
        import websockets
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests websocket-client websockets")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    scanner = CS2ScannerSimple(max_workers=args.workers)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞...")
    print(f"üì° WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {args.port}")
    print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        async with websockets.serve(scanner.handle_websocket, "0.0.0.0", args.port, ping_interval=None, ping_timeout=None):
            logger.info(f"üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {args.port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            scanner.start_scanning()
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
            await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...")
        scanner.stop_scanning()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        scanner.stop_scanning()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 