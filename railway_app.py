#!/usr/bin/env python3
"""
Railway App - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è CS2 Tool
–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –∏ WebSocket —Å–∫–∞–Ω–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import os
import sys
import threading
import asyncio
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–∫–∞–Ω–µ—Ä
from scanner_simple import CS2ScannerSimple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()
    
    def log_message(self, format, *args):
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
        pass

class RailwayApp:
    def __init__(self):
        self.http_port = int(os.environ.get('PORT', 8000))
        self.websocket_port = int(os.environ.get('WEBSOCKET_PORT', 8765))
        self.scanner = None
        self.http_server = None
        self.websocket_server = None
        
    def start_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø–∞–ø–∫—É public —Å —Ñ–∞–π–ª–∞–º–∏
            current_dir = os.path.dirname(os.path.abspath(__file__))
            public_dir = os.path.join(current_dir, 'public')
            os.chdir(public_dir)
            
            # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.0.0.0
            host = '0.0.0.0'
            self.http_server = HTTPServer((host, self.http_port), CORSRequestHandler)
            
            logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{self.http_port}")
            logger.info(f"üìÅ –û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: {os.getcwd()}")
            
            self.http_server.serve_forever()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def start_websocket_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import websockets
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            self.scanner = CS2ScannerSimple(max_workers=10)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
            host = '0.0.0.0'
            self.websocket_server = await websockets.serve(
                self.scanner.handle_websocket, 
                host, 
                self.websocket_port, 
                ping_interval=None, 
                ping_timeout=None
            )
            
            logger.info(f"üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{host}:{self.websocket_port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.scanner.start_scanning()
            logger.info("üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –î–µ—Ä–∂–∏–º WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            await self.websocket_server.wait_closed()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("=" * 60)
        print("   CS2 Tool - Railway App")
        print("=" * 60)
        print(f"üåê HTTP –ø–æ—Ä—Ç: {self.http_port}")
        print(f"üîå WebSocket –ø–æ—Ä—Ç: {self.websocket_port}")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        http_thread = threading.Thread(target=self.start_http_server, daemon=True)
        http_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        try:
            asyncio.run(self.start_websocket_server())
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            if self.http_server:
                self.http_server.shutdown()
            if self.scanner:
                self.scanner.stop_scanning()
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    app = RailwayApp()
    app.run() 