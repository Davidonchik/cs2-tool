class CS2Tool {
    constructor() {
        this.apiKey = null;
        this.servers = new Map();
        this.gameServers = new Map();
        this.emptyServers = new Map();
        this.serverHistory = new Map();
        this.isLoading = false;
        this.autoRefresh = true;
        this.region = '44';
        this.maxThreads = 50;
        this.autoConnectEnabled = false;
        
        // WebSocket –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–µ—Ä–æ–º
        this.websocket = null;
        this.isConnected = false;
        this.useNativeScanner = true;
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç
        this.selectedMaps = new Set();
        this.availableMaps = [
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2 (Premier/Competitive)
            'de_ancient', 'de_dust2', 'de_inferno', 'de_mirage', 'de_nuke', 
            'de_overpass', 'de_train', 'de_vertigo', 'de_anubis', 'de_grail', 'de_jura',
            
            // –ö–∞—Ä—Ç—ã –¥–ª—è Wingman
            'de_brewery', 'de_dogtown',
            
            // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞—Ä—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            'de_cache', 'de_dust', 'de_office', 'de_italy', 'de_cobblestone', 'de_aztec'
        ];
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CS2Tool...');
        this.loadSettings();
        this.checkApiKey();
        if (this.useNativeScanner) {
            this.initWebSocket();
        }
        this.initMapsSelector();
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    checkApiKey() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...');
        this.apiKey = localStorage.getItem('cs2tool_api_key');
        
        if (!this.apiKey) {
            this.showApiScreen();
        } else {
            this.initApp();
        }
    }

    showApiScreen() {
        const apiScreen = document.getElementById('apiScreen');
        const mainApp = document.getElementById('mainApp');
        
        if (apiScreen) apiScreen.style.display = 'flex';
        if (mainApp) mainApp.style.display = 'none';
        
        this.bindApiEvents();
    }

    initApp() {
        document.getElementById('apiScreen').style.display = 'none';
        document.getElementById('mainApp').style.display = 'flex';
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.bindEvents();
            });
        } else {
            this.bindEvents();
        }
        
        this.loadServers();
    }

    bindApiEvents() {
        const apiInput = document.getElementById('apiKey');
        const submitBtn = document.getElementById('apiSubmitBtn');
        const apiForm = document.getElementById('apiForm');

        if (apiForm) {
            apiForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.submitApiKey();
            });
        }

        apiInput.addEventListener('input', (e) => {
            const key = e.target.value.trim();
            submitBtn.disabled = key.length < 10;
        });

        submitBtn.addEventListener('click', (e) => {
            e.preventDefault();
            this.submitApiKey();
        });

        apiInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !submitBtn.disabled) {
                this.submitApiKey();
            }
        });
    }

    async submitApiKey() {
        const apiInput = document.getElementById('apiKey');
        const key = apiInput.value.trim();

        if (key.length < 10) {
            this.showNotification('API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
            const response = await fetch(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${key}&steamids=76561198000000000`);
            
            if (response.ok) {
                this.apiKey = key;
                localStorage.setItem('cs2tool_api_key', key);
                this.showNotification('API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
                this.initApp();
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞:', error);
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.', 'error');
        }
    }

    bindEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                this.switchSection(item.dataset.section);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        document.getElementById('minimizeBtn').addEventListener('click', () => {
            this.minimizeWindow();
        });

        document.getElementById('maximizeBtn').addEventListener('click', () => {
            this.maximizeWindow();
        });

        document.getElementById('closeBtn').addEventListener('click', () => {
            this.closeWindow();
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('regionSelect').addEventListener('change', (e) => {
            this.region = e.target.value;
            this.loadServers();
            this.saveSettings();
        });

        document.getElementById('maxThreads').addEventListener('change', (e) => {
            this.maxThreads = parseInt(e.target.value);
            this.saveSettings();
        });

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        document.getElementById('changeApiBtn').addEventListener('click', () => {
            this.showChangeApiDialog();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        document.getElementById('apiKeySetting').addEventListener('change', (e) => {
            const newKey = e.target.value.trim();
            if (newKey.length >= 10) {
                this.updateApiKey(newKey);
            }
        });

        // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const autoConnectToggle = document.getElementById('autoConnectToggle');
        if (autoConnectToggle) {
            autoConnectToggle.checked = this.autoConnectEnabled;
            
            autoConnectToggle.addEventListener('change', (e) => {
                this.autoConnectEnabled = e.target.checked;
                this.saveSettings();
                
                if (this.autoConnectEnabled) {
                    this.showNotification('–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ', 'success');
                } else {
                    this.showNotification('–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ', 'info');
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        const cleanupBtn = document.getElementById('cleanupBtn');
        if (cleanupBtn) {
            cleanupBtn.addEventListener('click', () => {
                this.clearDisappearedServers();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.forceUpdateFromScanner();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const autoSaveThreshold = document.getElementById('autoSaveThreshold');
        if (autoSaveThreshold) {
            autoSaveThreshold.addEventListener('change', async (e) => {
                const threshold = parseInt(e.target.value);
                if (threshold > 0 && threshold <= 10) {
                    const success = await this.setAutoSaveThreshold(threshold);
                    if (success) {
                        this.showNotification(`–ü–æ—Ä–æ–≥ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold} —Å–º–µ–Ω –∫–∞—Ä—Ç`, 'success');
                    } else {
                        this.showNotification('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
                    }
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const adminLoginBtn = document.getElementById('adminLoginBtn');
        if (adminLoginBtn) {
            adminLoginBtn.addEventListener('click', () => {
                this.showNotification('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'info');
            });
        }
    }

    switchSection(section) {
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });

        document.querySelector(`[data-section="${section}"]`).classList.add('active');

        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });

        document.getElementById(`${section}-section`).classList.add('active');

        if (section === 'empty-servers') {
            this.loadEmptyServers();
        } else if (section === 'game-servers') {
            this.loadGameServers();
        } else if (section === 'saved-servers') {
            this.loadSavedServers();
        }
    }

    async loadServers() {
        if (this.isLoading) return;
        
        if (!this.apiKey) {
            this.showError('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.');
            return;
        }
        
        this.isLoading = true;
        
        try {
            const isLocalServer = window.location.hostname === 'localhost' && (window.location.port === '8000' || window.location.port === '8001');
            
            if (!isLocalServer) {
                this.showError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–µ—Ä–æ–º.');
                return;
            }
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
            if (this.useNativeScanner && this.isConnected) {
                console.log('üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä');
                console.log('üîå –°—Ç–∞—Ç—É—Å WebSocket:', this.websocket ? this.websocket.readyState : '–Ω–µ —Å–æ–∑–¥–∞–Ω');
                this.sendWebSocketMessage('start_scan');
            } else {
                console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º');
                console.log('üîå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞:', {
                    useNativeScanner: this.useNativeScanner,
                    isConnected: this.isConnected,
                    websocketExists: !!this.websocket,
                    readyState: this.websocket ? this.websocket.readyState : '–Ω–µ —Å–æ–∑–¥–∞–Ω'
                });
                await this.scanAllMaps(isLocalServer);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        } finally {
            this.isLoading = false;
        }
    }

    async scanAllMaps(isLocalServer) {
        const maps = [
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2 (Premier/Competitive)
            'de_ancient', 'de_dust2', 'de_inferno', 'de_mirage', 'de_nuke', 
            'de_overpass', 'de_train', 'de_vertigo', 'de_anubis', 'de_grail', 'de_jura',
            
            // –ö–∞—Ä—Ç—ã –¥–ª—è Wingman
            'de_brewery', 'de_dogtown',
            
            // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞—Ä—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            'de_cache', 'de_dust', 'de_office', 'de_italy', 'de_cobblestone', 'de_aztec'
        ];
        
        const allServers = [];
        let processedMaps = 0;
        
        const executeRequest = async (task) => {
            const { map, index } = task;
            
            try {
                const url = isLocalServer 
                    ? `http://localhost:8000/api/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\${map}\\region\\${this.region}`
                    : `https://api.steampowered.com/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\${map}\\region\\${this.region}`;
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.response && data.response.servers) {
                    allServers.push(...data.response.servers);
                    console.log(`–ö–∞—Ä—Ç–∞ ${map}: –Ω–∞–π–¥–µ–Ω–æ ${data.response.servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤`);
                }
                
                processedMaps++;
                this.updateLoadingStatus(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ä—Ç: ${processedMaps}/${maps.length}`);
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã ${map}:`, error);
            }
        };
        
        const tasks = maps.map((map, index) => ({ map, index }));
        const chunks = this.chunkArray(tasks, this.maxThreads);
        
        for (const chunk of chunks) {
            await Promise.all(chunk.map(executeRequest));
        }
        
        this.processServers(allServers);
    }

    chunkArray(array, size) {
        const chunks = [];
        for (let i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }

    updateLoadingStatus(message) {
        const serversList = document.getElementById('serversList');
        if (serversList) {
            serversList.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>${message}</p>
                </div>
            `;
        }
    }

    async loadEmptyServers() {
        if (this.isLoading) return;
        
        this.isLoading = true;
        this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...');
        
        try {
            const isLocalServer = window.location.hostname === 'localhost' && (window.location.port === '8000' || window.location.port === '8001');
            
            if (this.useNativeScanner && this.isConnected) {
                this.sendWebSocketMessage('get_empty_servers');
            } else {
                const url = isLocalServer 
                    ? `http://localhost:8000/api/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\graphics_settings\\region\\${this.region}`
                    : `https://api.steampowered.com/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\graphics_settings\\region\\${this.region}`;
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.response && data.response.servers) {
                    this.emptyServers.clear();
                    data.response.servers.forEach(server => {
                        this.emptyServers.set(server.steamid, server);
                    });
                    this.updateEmptyServersDisplay();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.');
        } finally {
            this.isLoading = false;
        }
    }

    updateEmptyServersDisplay() {
        const serversList = document.getElementById('emptyServersList');
        const serversCount = document.querySelector('#empty-servers-section .servers-count');
        
        if (this.emptyServers.size === 0) {
            serversList.innerHTML = `
                <div class="loading">
                    <i class="fas fa-ghost" style="font-size: 48px; color: #64ffda; margin-bottom: 20px;"></i>
                    <p>–ü—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
            `;
            serversCount.textContent = '–ü—É—Å—Ç—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (0)';
            return;
        }

        serversList.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedEmptyServers = Array.from(this.emptyServers.values()).sort((a, b) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            const timeA = new Date(a.last_update || a.added_at || 0).getTime();
            const timeB = new Date(b.last_update || b.added_at || 0).getTime();
            return timeB - timeA; // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
        });
        
        sortedEmptyServers.forEach(server => {
            const serverCard = this.createServerCard(server);
            serversList.appendChild(serverCard);
        });
        
        serversCount.textContent = `–ü—É—Å—Ç—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (${this.emptyServers.size})`;
    }

    async loadGameServers() {
        if (this.isLoading) return;
        
        this.isLoading = true;
        this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...');
        
        try {
            const isLocalServer = window.location.hostname === 'localhost' && (window.location.port === '8000' || window.location.port === '8001');
            
            if (this.useNativeScanner && this.isConnected) {
                this.sendWebSocketMessage('get_game_servers');
            } else {
                const maps = ['de_dust2', 'de_mirage', 'de_inferno', 'de_cache', 'de_overpass', 'de_nuke', 'de_train', 'de_ancient', 'de_vertigo', 'de_anubis'];
                const allServers = [];
                
                for (const map of maps) {
                    const url = isLocalServer 
                        ? `http://localhost:8000/api/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\${map}\\region\\${this.region}`
                        : `https://api.steampowered.com/IGameServersService/GetServerList/v1/?key=${this.apiKey}&filter=appid\\730\\map\\${map}\\region\\${this.region}`;
                    
                    const response = await fetch(url);
                    const data = await response.json();
                    
                    if (data.response && data.response.servers) {
                        allServers.push(...data.response.servers);
                    }
                }
                
                this.gameServers.clear();
                allServers.forEach(server => {
                    this.gameServers.set(server.steamid, server);
                });
                this.updateGameServersDisplay();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.');
        } finally {
            this.isLoading = false;
        }
    }

    updateGameServersDisplay() {
        const serversList = document.getElementById('gameServersList');
        const serversCount = document.querySelector('#game-servers-section .servers-count');
        
        if (this.gameServers.size === 0) {
            serversList.innerHTML = `
                <div class="loading">
                    <i class="fas fa-gamepad" style="font-size: 48px; color: #64ffda; margin-bottom: 20px;"></i>
                    <p>–ò–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
            `;
            serversCount.textContent = '–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (0)';
            return;
        }

        serversList.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedGameServers = Array.from(this.gameServers.values()).sort((a, b) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            const timeA = new Date(a.last_update || a.added_at || 0).getTime();
            const timeB = new Date(b.last_update || b.added_at || 0).getTime();
            return timeB - timeA; // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
        });
        
        sortedGameServers.forEach(server => {
            const serverCard = this.createServerCard(server);
            serversList.appendChild(serverCard);
        });
        
        serversCount.textContent = `–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (${this.gameServers.size})`;
    }

    processServers(servers) {
        const newServers = [];
        const disappearedServers = [];
        const returnedServers = [];
        
        servers.forEach(server => {
            const steamId = server.steamid;
            const wasInHistory = this.serverHistory.has(steamId);
            const isCurrentlyDisappeared = server.map === 'graphics_settings';
            
            if (!wasInHistory) {
                console.log('–Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', server.name || server.addr, '–∫–∞—Ä—Ç–∞:', server.map);
                this.serverHistory.set(steamId, server);
            }
            
            if (isCurrentlyDisappeared) {
                if (!this.servers.has(steamId)) {
                    disappearedServers.push(server);
                }
                this.servers.set(steamId, server);
            } else {
                if (this.servers.has(steamId)) {
                    returnedServers.push(server);
                    this.servers.delete(steamId);
                }
            }
        });
        
        this.updateServersDisplay();
        
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${newServers.length} –Ω–æ–≤—ã—Ö, ${disappearedServers.length} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö, ${returnedServers.length} –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–µ—Ä–æ–≤`);
        
        if (disappearedServers.length > 0) {
            this.showNotification(`${disappearedServers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ graphics_settings`, 'warning');
        }
        
        if (returnedServers.length > 0) {
            this.showNotification(`${returnedServers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å graphics_settings`, 'success');
        }
    }

    updateServersDisplay() {
        const serversList = document.getElementById('serversList');
        const serversCount = document.querySelector('.servers-count');
        
        console.log(`–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${this.servers.size} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, ${this.serverHistory.size} –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
        console.log('—Å–ø–∏—Å–æ–∫ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:', Array.from(this.servers.values()).map(s => s.name || s.addr));
        
        if (this.servers.size === 0) {
            console.log('–Ω–µ—Ç –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è');
            serversList.innerHTML = `
                <div class="loading">
                    <i class="fas fa-search" style="font-size: 48px; color: #64ffda; margin-bottom: 20px;"></i>
                    <p>–û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –Ω–∞ graphics_settings...</p>
                    <p style="font-size: 12px; color: #888;">–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${this.serverHistory.size} —Å–µ—Ä–≤–µ—Ä–æ–≤</p>
                    <p style="font-size: 10px; color: #666;">–°–µ—Ä–≤–µ—Ä—ã –Ω–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è</p>
                </div>
            `;
            serversCount.textContent = `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: ${this.serverHistory.size} —Å–µ—Ä–≤–µ—Ä–æ–≤ | –ò—Å—á–µ–∑–Ω—É–≤—à–∏—Ö: 0`;
            return;
        }

        serversList.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedServers = Array.from(this.servers.values()).sort((a, b) => {
            const timeA = new Date(a.disappeared_at || 0).getTime();
            const timeB = new Date(b.disappeared_at || 0).getTime();
            return timeB - timeA; // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
        });
        
        sortedServers.forEach(server => {
            const serverCard = this.createServerCard(server);
            serversList.appendChild(serverCard);
        });
        
        serversCount.textContent = `–ò—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: ${this.servers.size} | –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: ${this.serverHistory.size}`;
    }

    createServerCard(server) {
        const card = document.createElement('div');
        card.className = 'server-card';
        card.dataset.steamId = server.steamid;
        
        const isDisappeared = server.map === 'graphics_settings' && server.disappeared_at;
        
        if (isDisappeared) {
            const disappearedDate = new Date(server.disappeared_at).toLocaleString('ru-RU');
            
            card.innerHTML = `
                <div class="server-header">
                    <div class="server-name">${this.escapeHtml(server.name)}</div>
                    <div class="server-status">
                        <div class="status-indicator disappeared"></div>
                        <span>–ò—Å—á–µ–∑</span>
                    </div>
                </div>
                
                <div class="server-details">
                    <div class="detail-item">
                        <div class="detail-label">IP:Port</div>
                        <div class="detail-value">${server.addr}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ö–∞—Ä—Ç–∞</div>
                        <div class="detail-value">graphics_settings</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ò—Å—á–µ–∑</div>
                        <div class="detail-value">${disappearedDate}</div>
                    </div>
                </div>
                
                <div class="server-actions">
                    <button class="action-btn copy-btn" onclick="cs2Tool.copyServer('${server.addr}')">
                        <i class="fas fa-copy"></i>
                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP
                    </button>
                    <button class="action-btn connect-btn" onclick="cs2Tool.connectToServer('${server.addr}')">
                        <i class="fas fa-play"></i>
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </button>
                </div>
            `;
        } else {
            const players = server.players || 0;
            const maxPlayers = server.max_players || 64;
            const bots = server.bots || 0;
            const realPlayers = players - bots;
            
            card.innerHTML = `
                <div class="server-header">
                    <div class="server-name">${this.escapeHtml(server.name)}</div>
                    <div class="server-status">
                        <div class="status-indicator"></div>
                        <span>–û–Ω–ª–∞–π–Ω</span>
                    </div>
                </div>
                
                <div class="server-details">
                    <div class="detail-item">
                        <div class="detail-label">IP:Port</div>
                        <div class="detail-value">${server.addr}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ò–≥—Ä–æ–∫–∏</div>
                        <div class="detail-value">${realPlayers}/${maxPlayers} (${bots} –±–æ—Ç–æ–≤)</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ö–∞—Ä—Ç–∞</div>
                        <div class="detail-value">${server.map}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–í–µ—Ä—Å–∏—è</div>
                        <div class="detail-value">${server.version}</div>
                    </div>
                </div>
                
                <div class="server-actions">
                    <button class="action-btn copy-btn" onclick="cs2Tool.copyServer('${server.addr}')">
                        <i class="fas fa-copy"></i>
                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP
                    </button>
                    <button class="action-btn connect-btn" onclick="cs2Tool.connectToServer('${server.addr}')">
                        <i class="fas fa-play"></i>
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </button>
                </div>
            `;
        }
        
        return card;
    }

    async loadMapChangesStats(steamId) {
        try {
            const stats = await this.getMapChangesStats(steamId);
            const countElement = document.querySelector(`[data-steam-id="${steamId}"]`);
            
            if (countElement && stats.status === 'success') {
                const changesCount = stats.stats.changes_count || 0;
                const lastChange = stats.stats.last_change;
                
                let displayText = `${changesCount} —Ä–∞–∑`;
                
                if (changesCount > 0 && lastChange) {
                    const lastChangeDate = new Date(lastChange).toLocaleString('ru-RU');
                    displayText += ` (–ø–æ—Å–ª–µ–¥–Ω—è—è: ${lastChangeDate})`;
                }
                
                if (changesCount >= 3) {
                    displayText += ' üîÑ';
                }
                
                countElement.innerHTML = displayText;
                countElement.className = 'detail-value map-changes-count';
                
                if (changesCount > 0) {
                    countElement.style.color = '#64ffda';
                    countElement.style.fontWeight = 'bold';
                }
            } else if (countElement) {
                countElement.innerHTML = '0 —Ä–∞–∑';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω –∫–∞—Ä—Ç:', error);
            const countElement = document.querySelector(`[data-steam-id="${steamId}"]`);
            if (countElement) {
                countElement.innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            }
        }
    }

    clearDisappearedServers() {
        this.servers.clear();
        this.updateServersDisplay();
        this.showNotification('–°–ø–∏—Å–æ–∫ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω', 'success');
    }

    copyServer(address) {
        navigator.clipboard.writeText(address).then(() => {
            this.showNotification(`IP –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${address}`, 'success');
        }).catch(() => {
            this.fallbackCopyTextToClipboard(address);
            this.showNotification(`IP –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${address}`, 'success');
        });
    }

    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
    }

    connectToServer(address) {
        const steamConnectUrl = `steam://connect/${address}`;
        
        this.showNotification(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${address}`, 'success');
        
        try {
            window.open(steamConnectUrl, '_blank');
        } catch (error) {
            const connectCommand = `connect ${address}`;
            navigator.clipboard.writeText(connectCommand).then(() => {
                this.showNotification(`–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${connectCommand}`, 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(connectCommand);
                this.showNotification(`–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${connectCommand}`, 'success');
            });
            
            setTimeout(() => {
                this.showNotification('–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å CS2 (F1)', 'info');
            }, 1000);
        }
    }

    autoConnectToServer(server) {
        if (!this.autoConnectEnabled) return;
        
        const steamConnectUrl = `steam://connect/${server.addr}`;
        
        this.showNotification(`–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${server.name || server.addr}`, 'success');
        
        this.autoConnectEnabled = false;
        const toggle = document.getElementById('autoConnectToggle');
        if (toggle) {
            toggle.checked = false;
        }
        
        try {
            window.open(steamConnectUrl, '_blank');
        } catch (error) {
            const connectCommand = `connect ${server.addr}`;
            navigator.clipboard.writeText(connectCommand).then(() => {
                this.showNotification(`–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${connectCommand}`, 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(connectCommand);
                this.showNotification(`–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${connectCommand}`, 'success');
            });
            
            setTimeout(() => {
                this.showNotification('–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å CS2 (F1)', 'info');
            }, 1000);
        }
    }

    showError(message) {
        const serversList = document.getElementById('serversList');
        serversList.innerHTML = `
            <div class="loading">
                <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: #ff6b6b; margin-bottom: 20px;"></i>
                <p>${message}</p>
            </div>
        `;
    }

    showNotification(message, type = 'success') {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let container = document.getElementById('notificationsContainer');
        if (!container) {
            container = document.createElement('div');
            container.className = 'notifications-container';
            container.id = 'notificationsContainer';
            document.body.appendChild(container);
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationId = 'notification_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const getIcon = (type) => {
            switch (type) {
                case 'success': return 'fas fa-check';
                case 'error': return 'fas fa-exclamation-triangle';
                case 'warning': return 'fas fa-exclamation-circle';
                case 'info': return 'fas fa-info-circle';
                default: return 'fas fa-bell';
            }
        };

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification-item ${type}`;
        notification.id = notificationId;
        
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">
                    <i class="${getIcon(type)}"></i>
                </div>
                <div class="notification-text">${this.escapeHtml(message)}</div>
                <button class="notification-close" onclick="cs2Tool.closeNotification('${notificationId}')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="notification-progress"></div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = notification.querySelector('.notification-progress');
        const duration = 5000; // 5 —Å–µ–∫—É–Ω–¥
        const startTime = Date.now();
        
        const updateProgress = () => {
            const elapsed = Date.now() - startTime;
            const remaining = Math.max(0, duration - elapsed);
            const progressPercent = (remaining / duration) * 100;
            
            progress.style.width = progressPercent + '%';
            
            if (remaining > 0) {
                requestAnimationFrame(updateProgress);
            }
        };
        
        updateProgress();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        const autoCloseTimeout = setTimeout(() => {
            this.closeNotification(notificationId);
        }, duration);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º timeout –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
        notification.dataset.autoCloseTimeout = autoCloseTimeout;

        // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.playNotificationSound(type);

        return notificationId;
    }

    closeNotification(notificationId) {
        const notification = document.getElementById(notificationId);
        if (!notification) return;

        // –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (notification.dataset.autoCloseTimeout) {
            clearTimeout(parseInt(notification.dataset.autoCloseTimeout));
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        notification.classList.add('hide');
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 400);
    }

    playNotificationSound(type) {
        try {
            const audio = document.getElementById('serverFoundSound');
            if (audio) {
                // –†–∞–∑–Ω—ã–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                const volumes = {
                    'success': 0.3,
                    'error': 0.5,
                    'warning': 0.4,
                    'info': 0.2
                };
                
                audio.volume = volumes[type] || 0.3;
                audio.currentTime = 0;
                audio.play().catch(e => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e);
        }
    }

    loadSettings() {
        const settings = JSON.parse(localStorage.getItem('cs2tool_settings') || '{}');
        
        this.region = settings.region || '44';
        this.maxThreads = settings.maxThreads || 50;
        this.autoConnectEnabled = settings.autoConnectEnabled || false;
        
        if (document.getElementById('regionSelect')) {
            document.getElementById('regionSelect').value = this.region;
        }
        if (document.getElementById('maxThreads')) {
            document.getElementById('maxThreads').value = this.maxThreads;
        }
        if (document.getElementById('apiKeySetting')) {
            document.getElementById('apiKeySetting').value = this.apiKey || '';
        }
        if (document.getElementById('autoConnectToggle')) {
            document.getElementById('autoConnectToggle').checked = this.autoConnectEnabled;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.loadAutoSaveSettings();
    }

    async loadAutoSaveSettings() {
        try {
            const threshold = await this.getAutoSaveThreshold();
            const autoSaveThreshold = document.getElementById('autoSaveThreshold');
            if (autoSaveThreshold) {
                autoSaveThreshold.value = threshold;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }

    saveSettings() {
        const settings = {
            region: this.region,
            maxThreads: this.maxThreads,
            autoConnectEnabled: this.autoConnectEnabled
        };
        
        localStorage.setItem('cs2tool_settings', JSON.stringify(settings));
    }

    minimizeWindow() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
    }

    maximizeWindow() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
    }

    closeWindow() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showChangeApiDialog() {
        if (confirm('–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á? –¢–µ–∫—É—â–∏–π –∫–ª—é—á –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.')) {
            localStorage.removeItem('cs2tool_api_key');
            this.apiKey = null;
            this.showApiScreen();
        }
    }

    async updateApiKey(newKey) {
        try {
            const response = await fetch(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${newKey}&steamids=76561198000000000`);
            
            if (response.ok) {
                this.apiKey = newKey;
                localStorage.setItem('cs2tool_api_key', newKey);
                this.showNotification('API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
                
                if (this.autoRefresh) {
                    this.loadServers();
                }
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:', error);
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.', 'error');
        }
    }

    resetApiKey() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å API –∫–ª—é—á? –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')) {
            localStorage.removeItem('cs2tool_api_key');
            this.apiKey = null;
            this.showApiScreen();
        }
    }
    
    initWebSocket() {
        try {
            console.log('üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–∫–∞–Ω–µ—Ä—É...');
            this.websocket = new WebSocket('ws://localhost:8765');
            
            this.websocket.onopen = () => {
                console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.isConnected = true;
                this.useNativeScanner = true;
                this.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–∫–∞–Ω–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
                
                if (this.apiKey) {
                    console.log('üîë –û—Ç–ø—Ä–∞–≤–∫–∞ API –∫–ª—é—á–∞ –Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–∫–∞–Ω–µ—Ä—É...');
                    this.sendWebSocketMessage('set_api_key', { api_key: this.apiKey });
                } else {
                    console.warn('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è');
                    this.showNotification('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 'warning');
                }
            };
            
            this.websocket.onmessage = (event) => {
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
                try {
                    const data = JSON.parse(event.data);
                    this.handleWebSocketMessage(data);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
            
            this.websocket.onclose = () => {
                console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                this.isConnected = false;
                this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ', 'warning');
                
                setTimeout(() => {
                    if (this.useNativeScanner) {
                        this.initWebSocket();
                    }
                }, 5000);
            };
            
            this.websocket.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.isConnected = false;
                this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–∫–∞–Ω–µ—Ä—É', 'error');
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
            this.useNativeScanner = false;
            this.showNotification('–ù–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º', 'warning');
        }
    }
    
    handleWebSocketMessage(data) {
        console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞:', data.type);
        console.log('üì® –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
        
        switch (data.type) {
            case 'api_key_set':
                console.log('üîë –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞');
                this.handleApiKeySet(data);
                break;
            case 'initial_state':
                console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
                this.handleInitialState(data);
                break;
            case 'scan_complete':
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
                this.handleScanComplete(data);
                break;
            case 'empty_servers_update':
                console.log('üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
                this.handleEmptyServersUpdate(data);
                break;
            case 'game_servers_update':
                console.log('üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
                this.handleGameServersUpdate(data);
                break;
            case 'saved_servers_update':
                console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
                this.handleSavedServersUpdate(data);
                break;
            case 'scan_started':
                console.log('üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–µ—Ä–æ–º');
                this.showNotification('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ', 'success');
                break;
            case 'force_update':
                console.log('üì§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
                this.showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
                break;
            case 'error':
                console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞');
                this.showNotification(`–û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞: ${data.message}`, 'error');
                break;
            default:
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
                break;
        }
    }
    
    handleApiKeySet(data) {
        if (data.status === 'success') {
            console.log('üîë API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º —Å–∫–∞–Ω–µ—Ä–µ');
            this.showNotification('–ù–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'success');
            this.sendWebSocketMessage('get_initial_state');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞:', data.message);
            this.showNotification(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞: ${data.message}`, 'error');
        }
    }
    
    handleInitialState(data) {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞');
        console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        let disappearedServers = [];
        let gameServers = [];
        let stats = {};
        
        if (data.disappeared_servers) {
            disappearedServers = data.disappeared_servers;
        } else if (data.servers) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ servers —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            disappearedServers = data.servers.filter(server => server.map === 'graphics_settings');
            gameServers = data.servers.filter(server => server.map !== 'graphics_settings');
        }
        
        if (data.stats) {
            stats = data.stats;
        } else {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                total_tracked: gameServers.length + disappearedServers.length
            };
        }
        
        console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', {
            disappeared_servers: disappearedServers.length,
            game_servers: gameServers.length,
            stats: stats
        });
        
        this.servers.clear();
        disappearedServers.forEach(server => {
            console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—á–µ–∑–Ω—É–≤—à–∏–π —Å–µ—Ä–≤–µ—Ä (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ):', server.name || server.addr, '–∫–∞—Ä—Ç–∞:', server.map);
            this.servers.set(server.steamid, server);
        });
        
        this.gameServers.clear();
        gameServers.forEach(server => {
            this.gameServers.set(server.steamid, server);
        });
        
        this.updateServersDisplay();
        this.updateGameServersDisplay();
        
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.servers.size} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö, ${this.gameServers.size} –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`);
        
        if (stats.total_tracked > 0) {
            this.showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stats.total_tracked} —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`, 'success');
        }
    }
    
    handleScanComplete(data) {
        console.log('‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä)');
        console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        let disappearedServers = [];
        let gameServers = [];
        let stats = {};
        
        if (data.disappeared_servers) {
            disappearedServers = data.disappeared_servers;
        } else if (data.servers) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ servers —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            disappearedServers = data.servers.filter(server => server.map === 'graphics_settings');
            gameServers = data.servers.filter(server => server.map !== 'graphics_settings');
        }
        
        if (data.stats) {
            stats = data.stats;
        } else {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                disappeared_count: disappearedServers.length,
                returned_count: 0,
                total_current: gameServers.length
            };
        }
        
        console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            disappeared_servers: disappearedServers.length,
            game_servers: gameServers.length,
            stats: stats
        });
        
        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
        this.servers.clear();
        disappearedServers.forEach(server => {
            console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—á–µ–∑–Ω—É–≤—à–∏–π —Å–µ—Ä–≤–µ—Ä:', server.name || server.addr, '–∫–∞—Ä—Ç–∞:', server.map);
            this.servers.set(server.steamid, server);
        });
        
        this.gameServers.clear();
        gameServers.forEach(server => {
            this.gameServers.set(server.steamid, server);
        });
        
        console.log(`üìä –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${this.servers.size} –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö, ${this.gameServers.size} –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`);
        
        this.updateServersDisplay();
        this.updateGameServersDisplay();
        
        if (stats.disappeared_count > 0) {
            this.showNotification(`${stats.disappeared_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ graphics_settings`, 'warning');
            
            if (this.autoConnectEnabled && disappearedServers.length > 0) {
                const newServer = disappearedServers[0];
                this.autoConnectToServer(newServer);
            }
        }
        if (stats.returned_count > 0) {
            this.showNotification(`${stats.returned_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å graphics_settings`, 'success');
        }
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.disappeared_count} –∏—Å—á–µ–∑–ª–æ, ${stats.returned_count} –≤–µ—Ä–Ω—É–ª–æ—Å—å, ${stats.total_current} –≤—Å–µ–≥–æ`);
    }
    
    handleEmptyServersUpdate(data) {
        console.log('üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞');
        
        this.emptyServers.clear();
        data.empty_servers.forEach(server => {
            this.emptyServers.set(server.steamid, server);
        });
        
        this.updateEmptyServersDisplay();
        this.showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.emptyServers.size} –ø—É—Å—Ç—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`, 'success');
    }
    
    handleGameServersUpdate(data) {
        console.log('üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞');
        
        this.gameServers.clear();
        data.game_servers.forEach(server => {
            this.gameServers.set(server.steamid, server);
        });
        
        this.updateGameServersDisplay();
        this.showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.gameServers.size} –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`, 'success');
    }

    handleSavedServersUpdate(data) {
        console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
        if (data.saved_servers) {
            this.savedServers = data.saved_servers;
            this.updateSavedServersDisplay();
            this.updateSavedServersStats();
        }
    }

    updateSavedServersDisplay() {
        const savedServersList = document.getElementById('savedServersList');
        if (!savedServersList) return;

        if (!this.savedServers || this.savedServers.length === 0) {
            savedServersList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-bookmark" style="font-size: 48px; color: #64ffda; margin-bottom: 20px;"></i>
                    <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤</p>
                    <p style="font-size: 12px; color: #888;">–°–µ—Ä–≤–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ —á–∞—Å—Ç–æ–π —Å–º–µ–Ω–µ –∫–∞—Ä—Ç</p>
                </div>
            `;
            return;
        }

        savedServersList.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ–Ω –∫–∞—Ä—Ç (–±–æ–ª—å—à–µ —Å–º–µ–Ω —Å–≤–µ—Ä—Ö—É)
        const sortedSavedServers = this.savedServers.sort((a, b) => {
            const changesA = a.map_changes_count || 0;
            const changesB = b.map_changes_count || 0;
            return changesB - changesA; // –ë–æ–ª—å—à–µ —Å–º–µ–Ω —Å–≤–µ—Ä—Ö—É
        });
        
        sortedSavedServers.forEach(server => {
            const serverCard = this.createSavedServerCard(server);
            savedServersList.appendChild(serverCard);
        });
    }

    createSavedServerCard(server) {
        const card = document.createElement('div');
        card.className = 'saved-server-card';
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ–Ω –∫–∞—Ä—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        const mapChangesInfo = this.getMapChangesInfo(server);
        
        card.innerHTML = `
            <div class="saved-server-header">
                <div class="saved-server-name">${this.escapeHtml(server.name)}</div>
                <div class="saved-server-actions">
                    <button class="action-btn copy-btn" onclick="cs2Tool.copyServer('${server.ip}:${server.port}')">
                        <i class="fas fa-copy"></i>
                    </button>
                    <button class="action-btn connect-btn" onclick="cs2Tool.connectToServer('${server.ip}:${server.port}')">
                        <i class="fas fa-play"></i>
                    </button>
                    <button class="action-btn delete-btn" onclick="cs2Tool.deleteSavedServer('${server.ip}', '${server.port}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="saved-server-details">
                <div class="detail-item">
                    <div class="detail-label">IP:Port</div>
                    <div class="detail-value">${server.ip}:${server.port}</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">–†–µ–∂–∏–º</div>
                    <div class="detail-value">${this.getModeDisplayName(server.mode)}</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">–°–º–µ–Ω—ã –∫–∞—Ä—Ç</div>
                    <div class="detail-value map-changes-info">
                        ${mapChangesInfo}
                    </div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">–û–ø–∏—Å–∞–Ω–∏–µ</div>
                    <div class="detail-value">${this.escapeHtml(server.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</div>
                </div>
            </div>
        `;
        
        return card;
    }

    getMapChangesInfo(server) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
        const mapChangesCount = server.map_changes_count || 0;
        const lastMapChange = server.last_map_change || 'unknown';
        
        if (mapChangesCount === 0) {
            return '<span style="color: #888;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>';
        }
        
        let lastChangeText = '';
        if (lastMapChange !== 'unknown') {
            try {
                const changeDate = new Date(lastMapChange);
                lastChangeText = ` (–ø–æ—Å–ª–µ–¥–Ω—è—è: ${changeDate.toLocaleString('ru-RU')})`;
            } catch (e) {
                lastChangeText = '';
            }
        }
        
        return `<span style="color: #64ffda; font-weight: bold;">${mapChangesCount} —Å–º–µ–Ω${lastChangeText}</span>`;
    }

    getModeDisplayName(mode) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const modeStyles = {
            'Premier/Competitive': '<span style="color: #64ffda; font-weight: bold;">üèÜ Premier/Competitive</span>',
            'Wingman': '<span style="color: #ff6b6b; font-weight: bold;">‚öîÔ∏è Wingman</span>',
            'Legacy': '<span style="color: #ffd93d; font-weight: bold;">üìú Legacy</span>',
            'Mixed (Premier + Wingman)': '<span style="color: #a8e6cf; font-weight: bold;">üîÑ Mixed (Premier + Wingman)</span>',
            'Mixed': '<span style="color: #ffb3ba; font-weight: bold;">üîÑ Mixed</span>',
            'unknown': '<span style="color: #888;">‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>'
        };
        
        return modeStyles[mode] || `<span style="color: #888;">${mode}</span>`;
    }

    updateSavedServersStats() {
        const totalSavedServers = document.getElementById('totalSavedServers');
        const autoSavedServers = document.getElementById('autoSavedServers');
        const topMapChanges = document.getElementById('topMapChanges');
        
        if (totalSavedServers) {
            totalSavedServers.textContent = this.savedServers ? this.savedServers.length : 0;
        }
        
        if (autoSavedServers) {
            const autoSavedCount = this.savedServers ? 
                this.savedServers.filter(s => s.description && s.description.includes('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω')).length : 0;
            autoSavedServers.textContent = autoSavedCount;
        }
        
        if (topMapChanges) {
            // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –∫–∞—Ä—Ç —Å—Ä–µ–¥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            if (this.savedServers && this.savedServers.length > 0) {
                const maxChanges = Math.max(...this.savedServers.map(s => s.map_changes_count || 0));
                topMapChanges.textContent = maxChanges;
            } else {
                topMapChanges.textContent = '0';
            }
        }
    }

    loadSavedServers() {
        if (this.isConnected) {
            this.sendWebSocketMessage('get_saved_servers');
        }
    }

    deleteSavedServer(ip, port) {
        if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä ${ip}:${port}?`)) {
            if (this.isConnected) {
                this.sendWebSocketMessage('delete_saved_server', { ip, port });
            }
        }
    }
    
    sendWebSocketMessage(type, data = {}) {
        if (this.websocket && this.isConnected) {
            const message = { type, ...data };
            this.websocket.send(JSON.stringify(message));
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', type);
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º');
            this.useNativeScanner = false;
        }
    }
    
    forceUpdateFromScanner() {
        console.log('üì§ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞');
        this.sendWebSocketMessage('force_update');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –∫–∞—Ä—Ç
    initMapsSelector() {
        console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–∞—Ä—Ç...');
        this.loadMapsSettings();
        this.renderMapsSelector();
        this.bindMapsEvents();
        console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    loadMapsSettings() {
        const savedMaps = localStorage.getItem('cs2tool_selected_maps');
        if (savedMaps) {
            try {
                const maps = JSON.parse(savedMaps);
                this.selectedMaps = new Set(maps);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä—Ç:', e);
                this.selectedMaps = new Set(this.availableMaps); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∫–∞—Ä—Ç—ã
            }
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
            this.selectedMaps = new Set(this.availableMaps);
        }
    }

    saveMapsSettings() {
        try {
            localStorage.setItem('cs2tool_selected_maps', JSON.stringify([...this.selectedMaps]));
            console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä—Ç:', e);
        }
    }

    renderMapsSelector() {
        const mapsList = document.getElementById('mapsList');
        if (!mapsList) return;

        mapsList.innerHTML = '';
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const mapCategories = {
            'premier': ['de_ancient', 'de_dust2', 'de_inferno', 'de_mirage', 'de_nuke', 'de_overpass', 'de_train'],
            'competitive': ['de_vertigo', 'de_anubis', 'de_grail', 'de_jura'],
            'wingman': ['de_brewery', 'de_dogtown'],
            'legacy': ['de_cache', 'de_dust', 'de_office', 'de_italy', 'de_cobblestone', 'de_aztec']
        };
        
        const categoryNames = {
            'premier': 'üèÜ Premier/Competitive',
            'competitive': '‚öîÔ∏è Competitive',
            'wingman': 'üë• Wingman',
            'legacy': 'üìú –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ'
        };
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        Object.entries(mapCategories).forEach(([category, maps]) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryHeader = document.createElement('div');
            categoryHeader.className = 'map-category-header';
            categoryHeader.innerHTML = `<span>${categoryNames[category]}</span>`;
            mapsList.appendChild(categoryHeader);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            maps.forEach(mapName => {
                if (this.availableMaps.includes(mapName)) {
                    const isSelected = this.selectedMaps.has(mapName);
                    const mapItem = document.createElement('div');
                    mapItem.className = `map-item ${isSelected ? 'selected' : ''}`;
                    mapItem.dataset.map = mapName;
                    
                    mapItem.innerHTML = `
                        <div class="map-checkbox">
                            ${isSelected ? '<i class="fas fa-check"></i>' : ''}
                        </div>
                        <span class="map-name">${this.getMapDisplayName(mapName)}</span>
                        <span class="map-count" id="count-${mapName}">0</span>
                    `;
                    
                    mapsList.appendChild(mapItem);
                }
            });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateMapsButtonsState();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateMapsStats();
    }

    getMapDisplayName(mapName) {
        const mapNames = {
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2 (Premier/Competitive)
            'de_ancient': 'Ancient',
            'de_dust2': 'Dust II',
            'de_inferno': 'Inferno',
            'de_mirage': 'Mirage',
            'de_nuke': 'Nuke',
            'de_overpass': 'Overpass',
            'de_train': 'Train',
            'de_vertigo': 'Vertigo',
            'de_anubis': 'Anubis',
            'de_grail': 'Grail',
            'de_jura': 'Jura',
            
            // –ö–∞—Ä—Ç—ã –¥–ª—è Wingman
            'de_brewery': 'Brewery',
            'de_dogtown': 'Dogtown',
            
            // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞—Ä—Ç—ã
            'de_cache': 'Cache',
            'de_dust': 'Dust',
            'de_office': 'Office',
            'de_italy': 'Italy',
            'de_cobblestone': 'Cobblestone',
            'de_aztec': 'Aztec'
        };
        return mapNames[mapName] || mapName;
    }

    bindMapsEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í—Å–µ" –∏ "–ù–∏ –æ–¥–Ω–æ–π"
        const selectAllBtn = document.getElementById('selectAllMaps');
        const deselectAllBtn = document.getElementById('deselectAllMaps');
        const selectPopularBtn = document.getElementById('selectPopularMaps');
        
        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', () => {
                this.selectedMaps = new Set(this.availableMaps);
                this.renderMapsSelector();
                this.saveMapsSettings();
                this.sendMapsUpdateToScanner();
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞—Ä—Ç—ã');
            });
        }
        
        if (deselectAllBtn) {
            deselectAllBtn.addEventListener('click', () => {
                this.selectedMaps.clear();
                this.renderMapsSelector();
                this.saveMapsSettings();
                this.sendMapsUpdateToScanner();
                console.log('‚ùå –°–Ω—è—Ç—ã –≤—Å–µ –∫–∞—Ä—Ç—ã');
            });
        }
        
        if (selectPopularBtn) {
            selectPopularBtn.addEventListener('click', () => {
                this.selectPopularMaps();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        const mapsList = document.getElementById('mapsList');
        if (mapsList) {
            mapsList.addEventListener('click', (e) => {
                const mapItem = e.target.closest('.map-item');
                if (mapItem) {
                    const mapName = mapItem.dataset.map;
                    this.toggleMap(mapName);
                }
            });
        }
    }

    toggleMap(mapName) {
        if (this.selectedMaps.has(mapName)) {
            this.selectedMaps.delete(mapName);
        } else {
            this.selectedMaps.add(mapName);
        }
        
        this.renderMapsSelector();
        this.saveMapsSettings();
        this.sendMapsUpdateToScanner();
        
        console.log(`üîÑ –ö–∞—Ä—Ç–∞ ${mapName} ${this.selectedMaps.has(mapName) ? '–≤—ã–±—Ä–∞–Ω–∞' : '—Å–Ω—è—Ç–∞'}`);
    }

    updateMapsButtonsState() {
        const selectAllBtn = document.getElementById('selectAllMaps');
        const deselectAllBtn = document.getElementById('deselectAllMaps');
        
        if (selectAllBtn && deselectAllBtn) {
            const allSelected = this.selectedMaps.size === this.availableMaps.length;
            const noneSelected = this.selectedMaps.size === 0;
            
            selectAllBtn.disabled = allSelected;
            deselectAllBtn.disabled = noneSelected;
            
            selectAllBtn.style.opacity = allSelected ? '0.5' : '1';
            deselectAllBtn.style.opacity = noneSelected ? '0.5' : '1';
        }
    }

    sendMapsUpdateToScanner() {
        if (this.websocket && this.isConnected) {
            this.sendWebSocketMessage('update_maps', {
                maps: [...this.selectedMaps]
            });
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç –≤ —Å–∫–∞–Ω–µ—Ä:', [...this.selectedMaps]);
        }
    }

    updateMapCount(mapName, count) {
        const countElement = document.getElementById(`count-${mapName}`);
        if (countElement) {
            const oldCount = parseInt(countElement.textContent) || 0;
            countElement.textContent = count;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            if (count !== oldCount) {
                countElement.classList.add('updated');
                setTimeout(() => {
                    countElement.classList.remove('updated');
                }, 500);
            }
        }
    }

    getSelectedMaps() {
        return [...this.selectedMaps];
    }

    getMapsStats() {
        const total = this.availableMaps.length;
        const selected = this.selectedMaps.size;
        const percentage = Math.round((selected / total) * 100);
        
        return {
            total,
            selected,
            percentage,
            status: selected === 0 ? 'none' : selected === total ? 'all' : 'partial'
        };
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–º–µ–Ω –∫–∞—Ä—Ç
    async getMapChangesStats(steamId) {
        if (!this.isConnected) return null;
        
        return new Promise((resolve) => {
            this.sendWebSocketMessage('get_map_changes_stats', { steam_id: steamId });
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            const originalHandler = this.handleWebSocketMessage.bind(this);
            this.handleWebSocketMessage = (data) => {
                if (data.type === 'map_changes_stats') {
                    this.handleWebSocketMessage = originalHandler;
                    resolve(data);
                } else {
                    originalHandler(data);
                }
            };
        });
    }

    async getTopChangingServers(limit = 10) {
        if (!this.isConnected) return [];
        
        return new Promise((resolve) => {
            this.sendWebSocketMessage('get_top_changing_servers', { limit });
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            const originalHandler = this.handleWebSocketMessage.bind(this);
            this.handleWebSocketMessage = (data) => {
                if (data.type === 'top_changing_servers') {
                    this.handleWebSocketMessage = originalHandler;
                    resolve(data.servers || []);
                } else {
                    originalHandler(data);
                }
            };
        });
    }

    async setAutoSaveThreshold(threshold) {
        if (!this.isConnected) return false;
        
        return new Promise((resolve) => {
            this.sendWebSocketMessage('set_auto_save_threshold', { threshold });
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            const originalHandler = this.handleWebSocketMessage.bind(this);
            this.handleWebSocketMessage = (data) => {
                if (data.type === 'auto_save_threshold_updated') {
                    this.handleWebSocketMessage = originalHandler;
                    resolve(data.status === 'success');
                } else {
                    originalHandler(data);
                }
            };
        });
    }

    async getAutoSaveThreshold() {
        if (!this.isConnected) return 3;
        
        return new Promise((resolve) => {
            this.sendWebSocketMessage('get_auto_save_threshold');
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            const originalHandler = this.handleWebSocketMessage.bind(this);
            this.handleWebSocketMessage = (data) => {
                if (data.type === 'auto_save_threshold') {
                    this.handleWebSocketMessage = originalHandler;
                    resolve(data.threshold || 3);
                } else {
                    originalHandler(data);
                }
            };
        });
    }

    updateMapsStats() {
        const stats = this.getMapsStats();
        const mapsHeader = document.querySelector('.maps-header h3');
        
        if (mapsHeader) {
            const statsText = ` (${stats.selected}/${stats.total})`;
            const existingStats = mapsHeader.querySelector('.maps-stats');
            
            if (existingStats) {
                existingStats.textContent = statsText;
            } else {
                const statsSpan = document.createElement('span');
                statsSpan.className = 'maps-stats';
                statsSpan.textContent = statsText;
                mapsHeader.appendChild(statsSpan);
            }
        }
    }

    selectPopularMaps() {
        const popularMaps = [
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã Premier/Competitive
            'de_dust2', 'de_mirage', 'de_inferno', 'de_nuke', 
            'de_overpass', 'de_ancient', 'de_vertigo', 'de_train',
            
            // –ù–æ–≤—ã–µ –∫–∞—Ä—Ç—ã CS2
            'de_anubis', 'de_grail', 'de_jura',
            
            // –ö–∞—Ä—Ç—ã –¥–ª—è Wingman
            'de_brewery', 'de_dogtown'
        ];
        
        this.selectedMaps = new Set(popularMaps);
        this.renderMapsSelector();
        this.saveMapsSettings();
        this.sendMapsUpdateToScanner();
        
        console.log('üéØ –í—ã–±—Ä–∞–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã');
        this.showNotification('–í—ã–±—Ä–∞–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let cs2Tool;

document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CS2Tool...');
    cs2Tool = new CS2Tool();
    console.log('‚úÖ CS2Tool —Å–æ–∑–¥–∞–Ω');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    if (cs2Tool && cs2Tool.bindEvents) {
        console.log('üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        cs2Tool.bindEvents();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', event.error);
    if (cs2Tool) {
        cs2Tool.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'error');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
    if (cs2Tool) {
        cs2Tool.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}); 