#!/usr/bin/env python3
"""
Railway Full - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è CS2 Tool
HTTP —Å–µ—Ä–≤–µ—Ä + WebSocket —Å–µ—Ä–≤–µ—Ä + –°–∫–∞–Ω–µ—Ä CS2
"""

import os
import sys
import asyncio
import threading
import time
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–∫–∞–Ω–µ—Ä
try:
    from scanner_simple import CS2ScannerSimple
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()
    
    def log_message(self, format, *args):
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
        pass

class RailwayFullApp:
    def __init__(self):
        self.http_port = int(os.environ.get('PORT', 8000))
        self.websocket_port = int(os.environ.get('WEBSOCKET_PORT', 8765))
        self.scanner = None
        self.http_server = None
        self.websocket_server = None
        self.is_running = False
        
    def start_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø–∞–ø–∫—É public
            current_dir = os.path.dirname(os.path.abspath(__file__))
            public_dir = os.path.join(current_dir, 'public')
            
            if os.path.exists(public_dir):
                os.chdir(public_dir)
                logger.info(f"üìÅ –û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: {os.getcwd()}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {public_dir}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            host = '0.0.0.0'
            self.http_server = HTTPServer((host, self.http_port), CORSRequestHandler)
            
            logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{self.http_port}")
            logger.info("‚úÖ Healthcheck –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
            
            self.http_server.serve_forever()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def start_websocket_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import websockets
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            self.scanner = CS2ScannerSimple(max_workers=10)
            logger.info("üîß –°–∫–∞–Ω–µ—Ä CS2 —Å–æ–∑–¥–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
            host = '0.0.0.0'
            self.websocket_server = await websockets.serve(
                self.scanner.handle_websocket, 
                host, 
                self.websocket_port, 
                ping_interval=None, 
                ping_timeout=None
            )
            
            logger.info(f"üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{host}:{self.websocket_port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.scanner.start_scanning()
            logger.info("üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –î–µ—Ä–∂–∏–º WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            await self.websocket_server.wait_closed()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def run_websocket_in_thread(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            asyncio.run(self.start_websocket_server())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket –ø–æ—Ç–æ–∫–µ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("=" * 60)
        print("   CS2 Tool - Railway Full")
        print("=" * 60)
        print(f"üåê HTTP –ø–æ—Ä—Ç: {self.http_port}")
        print(f"üîå WebSocket –ø–æ—Ä—Ç: {self.websocket_port}")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print()
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        websocket_thread = threading.Thread(target=self.run_websocket_in_thread, daemon=True)
        websocket_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è WebSocket —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–¥–ª—è healthcheck)
        try:
            self.start_http_server()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.is_running = False
            if self.http_server:
                self.http_server.shutdown()
            if self.scanner:
                self.scanner.stop_scanning()
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = RailwayFullApp()
        app.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 